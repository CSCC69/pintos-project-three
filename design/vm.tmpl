            +---------------------------+
            | CSCC69                    |
            | PROJECT 3: VIRTUAL MEMORY	|
            | DESIGN DOCUMENT           |
            +---------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Nathanael Robbins <nate.robbins@mail.utoronto.ca>
Lucas Ilea <lucas.ilea@mail.utoronto.ca>
Louis Ren <louis.ren@mail.utoronto.ca>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

            PAGE TABLE MANAGEMENT
            =====================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> A2: In a few paragraphs, describe your code for accessing the data
>> stored in the SPT about a given page.

In the page_fault() handler, the fault_addr is given. We round down this value to the nearest page, and then use hash_find to find the corresponding SPT entry.

>> A3: How does your code coordinate accessed and dirty bits between
>> kernel and user virtual addresses that alias a single frame, or
>> alternatively how do you avoid the issue?

We store the currently linked supplemental page table entry in the frame struct.
When we evict a frame, we check if the page has been accessed, and its dirty bits set.

---- SYNCHRONIZATION ----

>> A4: When two user processes both need a new frame at the same time,
>> how are races avoided?

We use a lock, frame_lock, to avoid race conditions between processes requesting the same frame
addresses concurrently. We also use this to prevent two processes from attempting to free the same frame at once.

---- RATIONALE ----

>> A5: Why did you choose the data structure(s) that you did for
>> representing virtual-to-physical mappings?

The data structure we used to represent virtual-to-physical mappings is a hash table used for the supplemental page table.
We chose a hashmap so that we could quickly find SPT entries in O(1) time from a faulting address.

               PAGING TO AND FROM DISK
               =======================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> B2: When a frame is required but none is free, some frame must be
>> evicted.  Describe your code for choosing a frame to evict.

We store our frames in a list as well.
In a loop, we pop the front and check if it has been accessed using pagedir_is_accessed. If it has been accessed we set
its accessed to false using pagedir_set_accessed. Then we push it to the end of the list and continue looping.
We do this until we find a frame that has not been accessed.

>> B3: When a process P obtains a frame that was previously used by a
>> process Q, how do you adjust the page table (and any other data
>> structures) to reflect the frame Q no longer has?

We store the supplemental page table entry in the frame struct and when a new process obtains the frame we
create a new spt entry that corresponds to that process. 

>> B4: Explain your heuristic for deciding whether a page fault for an
>> invalid virtual address should cause the stack to be extended into
>> the page that faulted.

Our heuristic for deciding whether to grow the stack is whether the virtual address is within 32 bytes of the previous stack pointer. If yes, we grow the stack. Otherwise,
we consider other page fault reasons, such as lazy loading executables.

---- SYNCHRONIZATION ----

>> B5: Explain the basics of your VM synchronization design.  In
>> particular, explain how it prevents deadlock.  (Refer to the
>> textbook for an explanation of the necessary conditions for
>> deadlock.)

>> B6: A page fault in process P can cause another process Q's frame
>> to be evicted.  How do you ensure that Q cannot access or modify
>> the page during the eviction process?  How do you avoid a race
>> between P evicting Q's frame and Q faulting the page back in?

We use a per-frame frame lock when acquiring and freeing frames.
This ensures that each frame is safe when attempting operation from other attemps to access it.

>> B7: Suppose a page fault in process P causes a page to be read from
>> the file system or swap.  How do you ensure that a second process Q
>> cannot interfere by e.g. attempting to evict the frame while it is
>> still being read in?

If it gets evicted when being read in, we will page fault again and re-read it.

>> B8: Explain how you handle access to paged-out pages that occur
>> during system calls.  Do you use page faults to bring in pages (as
>> in user programs), or do you have a mechanism for "locking" frames
>> into physical memory, or do you use some other design?  How do you
>> gracefully handle attempted accesses to invalid virtual addresses?

We use page faults to bring in pages. We check the virtual address validity by attempting to find them in our supplemental page
table. If we don't, we exit.

---- RATIONALE ----

>> B9: A single lock for the whole VM system would make
>> synchronization easy, but limit parallelism.  On the other hand,
>> using many locks complicates synchronization and raises the
>> possibility for deadlock but allows for high parallelism.  Explain
>> where your design falls along this continuum and why you chose to
>> design it this way.

Our design consists of multiple locks but one for each frame unit. This allows flexibility between separate vm units, but allow for
synchronization between the same frame.


             MEMORY MAPPED FILES
             ===================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Describe how memory mapped files integrate into your virtual
>> memory subsystem.  Explain how the page fault and eviction
>> processes differ between swap pages and other pages.

When we get an mmap syscall, we create supplemental page table entries, and mmap_data entries for each page required to read in the file,
without actually reading the file in yet. When we get a page fault, we can see whether we are given an mmap entry, then load that segment
of the file in its associated page. We store the files offset and read bytes so that we can load the required section into the page.
Virtual addresses held by the mmap_data entries are contiguous and hold the subsequent remaining pages
in their sequence allowing us to be able to munmap entire sequences of mmap_data page entries.

For mmap pages, we never write them to the swap disk. When we evict mmap pages, we check if the page is dirty. If it is, we write it back to
the original file. If it is not, it gets discarded and freed.

>> C3: Explain how you determine whether a new file mapping overlaps
>> any existing segment.

To determine whether a new file mapping overlaps segments of memory that are already mapped, we check the result of pagedir_get_page starting at the address passed into the mmap syscall, and for the
start of every next page required to mmap the file. If there is a page mapped at any of those addresses, we return early from mmap.

---- RATIONALE ----

>> C4: Mappings created with "mmap" have similar semantics to those of
>> data demand-paged from executables, except that "mmap" mappings are
>> written back to their original files, not to swap.  This implies
>> that much of their implementation can be shared.  Explain why your
>> implementation either does or does not share much of the code for
>> the two situations.

We share supplemental page entries when loading mmap from a file, because it also acts as an intermediary for the data in memory.
It also shares the code with the code for reading and lazily loading files in the page fault handler.

               SURVEY QUESTIONS
               ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

Very hard. But also we didn't start until there were only 5 days left.

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
